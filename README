Sheeple is a CLOS-like prototype-based object-oriented system for ANSI Common Lisp. This
implementation is canonical and is currently implemented only for SBCL.

Vocabulary:

*Sheep - singular used to refer to a single Sheeple object.

*Sheeple - plural used to refer to more than one sheep. Also used to refer to the project.

*Hierarchy List - An acyclic graph generated by COMPUTE-SHEEP-HIERARCHY-LIST that contains the
calculated ancestors of a particular sheep, sorted breadth-first left-right.

*Ancestor - Any sheep that appears in the list generated by COMPUTE-SHEEP-HIERARCHY-LIST for any
given sheep. This list only includes direct ancestors, not objects that could be considered
'cousins'.

*Descendant - For a sheep X, any sheep whose hierarchy list will contain X.

*Parent - A direct parent of a sheep, e.g. a sheep object present directly in a sheeps
sheep-direct-parents list.

*Child - A direct child of a sheep.


Specification:

== Object Creation ==

* Objects are prototypes. Objects are called sheep or sheeple. All sheep are children of DOLLY.

* Sheep can have multiple direct parents (multiple inheritance)

* Ancestor ordering works the same way as it does with CLOS (first parent defined in CLONE has
  greater precedence than second.) Ancestors are ordered with a breadth-first left-to-right graph
  sorting algorithm.

* New sheeple are created by using the CLONE macro. CLONE works similar to DEFCLASS:
(clone (parent1 parent2)
  ((slot1 value1)
   (slot2 value2)))
(clone ()) ;; also valid. Slot spec is optional.

* An empty parent list when using CLONE will automatically clone DOLLY

* All objects have a numerical SID (Sheep ID)

* The list of direct parents is dynamic. Parents can be added or removed at runtime.


== Slot Values ==

* Sheeple have direct slots and indirect slots

* Direct slots are set directly in a specific sheep object.

* Indirect slots are accessed by searching for direct slots that have been set along the sheep's
inheritance chain. The value of that ancestor's slot is used instead.

* Changing the value in the parent thus changes the value in the child.

* A child may override the value set by one of its parents at any time by setting a direct slot.

* If an ancestor already sets a slot, a descendant may not remove that slot from itself, unless
  it removes that slot from the ancestor.

* When accessing indirect slots, the hierarchy list ordering is obeyed.

== Talents ==

