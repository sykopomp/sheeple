About
=====

Sheeple is a Dynamic, CLOS-like Prototype-based Object-Oriented Programming Framework (or "POOP
Framework") that strives to maximize application flexibility, minimize cost while maximizing value,
optimize programmer time, and empower application implementers to better assist them leveraging
modern paradigms in order to proactively achieve next-gen synergy in tomorrow's web 3.0 world. It is
implemented in (mostly) ANSI Common Lisp. Sheeple is fully buzzword compliant.

Initially written as the object system of a text-based game online game engine ([Sykosomatic][9]),
Sheeple is provided as a module separate from its persistent counterpart, Persistent-Sheeple, as a
standalone library for use with any regular Lisp application.

Following the implementation of Sheeple's Metasheep Protocol, Persistent-Sheeple is being rewritten
to take full advantage of the protocol, allowing parallel operation of regular sheeple with psheep.

Sheeple is inspired by a number of Object-Oriented systems, mainly:

* [Common Lisp Object System (CLOS)][3]
* [LPC][4], a common language for building [MUD][7]s
* [MOO][5], implemented and used by [LambdaMOO][8]
* [Slate][6], a Smalltalk-like language with Prototype Multiple Dispatch that Sheeple bases its
  message dispatch system on.

[3]: <http://en.wikipedia.org/wiki/CLOS>
[4]: <http://en.wikipedia.org/wiki/LPC_(programming_language)>
[5]: <http://en.wikipedia.org/wiki/MOO_programming_language>
[6]: <http://slatelanguage.org/>
[7]: <http://en.wikipedia.org/wiki/MUD>
[8]: <http://en.wikipedia.org/wiki/Lambdamoo>
[9]: <http://github.com/zkat/sykosomatic/>

It was written with the purpose of providing a lot of the goodies of CLOS programming in a
completely prototype-based environment. As such, it shares a lot of features (and syntax) with
CLOS. The most notable features are multiple inheritance and multimethods (called multimessages).

This README contains a basic usage guide, and sort-of-spec of Sheeple. Much heavier documentation,
including a tutorial and a MSP spec is to come. Meanwhile, have fun reading the code (hohoho).

^this implementation makes use of trivial-garbage for weak-pointers, finalizers, and
 weak-hash-tables. The current version also only supports SBCL.

Disclaimer
----------
Because of a combination of the necessity to avoid name collisions in a system very similar to CLOS
and a desire to amuse myself (and others), Sheeple has been designed from the beginning to be
maximally groan-worthy with its naming scheme. I apologize in advance, and I am not responsible for
any issues the naming scheme might cause, such as Chronic Smug Weenie Nose-Tilting Syndrome.

I assure you, Sheeple is Serious Business(tm) for Serious Applications(tm).

Supported Platforms
-------------------
While portability is one of the goals for Sheeple, only SBCL is officially supported right now. It
has been tested on several platforms and operating systems, and passes all tests on them.


Loading Sheeple
---------------
It's fairly effortless to get Sheeple working. To get started, simply

         (asdf:oos 'asdf:load-op 'sheeple)
         (in-package sheeple-user)

And mess around from there. Be aware that if your implementation does not include ASDF, you will
have to acquire it and load it yourself. Clisp, for example, will require this.
For information on how to do this, check out [Cliki][1], or the [ASDF Homepage][2].

[1]: <http://www.cliki.net/asdf>
[2]: <http://common-lisp.net/project/asdf/>

Sheeple should work on most Lisp implementations, although it's mainly written and tested in SBCL on
Linux x86.

FiveAM is required if you wish to run the test suite. To run it:
        
        (asdf:oos 'asdf:load-op 'sheeple-tests)
        (sheeple-tests:sheeple-tests)

And watch the tests roll by. Only one should fail (CLOS Fleecing)

Notes
-----
If you want to get Sheeple to run on your favorite platform, feel free to e-mail me: zkat
. sykosomatic dot org, I'll help as much as I can (or even do the work for you). Any and all
comments are also greatly appreciated.


Features
--------

* Simple, but powerful defclass-like CLONE macro, with cloning options.

* Dynamic object management tools (inspection of objects, addition/removal of properties, all
  without any sort of redefinition).

* Dynamic property value access, following a prototype chain (the value of the nearest parent that
  set the value for a particular property is used if the child did not set one).

* Full integration with built-in Lisp types (wolves) by transparent autoboxing (called fleecing).

* Multiple inheritance through cloning with dynamic inspection and management (adding/removing) of
  parents.

* Multiple dispatch on messages (methods) -- messages specialize on specific instances, and follow
  inheritance hierarchy. Multimessage definition is almost identical to CLOS methods, and shares
  similar semantics.

* Dynamic removal of messages, as well as entire buzzwords with undefbuzzword/undefmessage.

* Auto-generated readers/writers, with :manipulator, :reader, and :writer property options.

* :before, :after, and :around messages

* (call-next-message) and (next-message-p)

* A Metaobject Protocol (or Metasheep Protocol, if you will), similar to the one described in
  AMOP. The basics of the MOP are available and undocumented... the feature is still under
  development.

Planned features that have not yet been implemented include:

* CLOS integration, including autoboxing of entire class hierarchies.

* Support more than just SBCL


Learning Sheeple
================

Please refer to doc/user-guide for a quick-and-dirty intro to Sheeple and how to use it.
