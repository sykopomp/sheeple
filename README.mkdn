About
=====

Sheeple is a Dynamic, CLOS-like Prototype-based Object-Oriented Programming Framework that strives
to maximize application flexibility, minimize cost while maximizing value, optimize programmer time,
and empower application implementers to better assist them leveraging modern paradigms in
order to proactively achieve next-gen synergy in tomorrow's web 3.0 world. It is implemented in ANSI
Common Lisp, with small parts are based on Closette. Sheeple is fully buzzword compliant.

Notes
-----

Sheeple should work on just about every implementation out there with a working CLOS
implementation. It is developed and tested on SBCL, but tests on other implementations would be
greatly appreciated. 

At the moment, Sheeple performance makes Ruby feel like optimized assembly, so it might not be
appropriate for large applications. It's quite fun to play around with. Once it has all features
working and passes all unit tests, there's plenty of fairly easy optimization to do, and it should
run more acceptably.

Features available so far:

* Simple, but powerful defclass-like cloning macro.

* Dynamic object management tools (inspection of objects, addition/removal of slots, all without any
  sort of redefinition).

* Dynamic property value access, following a prototype chain.

* Options for the CLONE macro.

* Full integration with built-in Lisp types by autoboxing (called fleecing) when appropriate.

* Multiple inheritance through cloning with dynamic inspection and management of parents.

* Multiple dispatch on messages (methods) -- messages specialize on specific instances, and follow
  inheritance hierarchy. Algorithm is based on Slate (http://slatelanguage.org).

* Multimessages work similarly to CLOS methods -- you define a generic function (defbuzzword), and a
  set of methods (defmessage), which can optionally have specialized arguments.

* Variable length lambda-lists for buzzwords.

* defbuzzword/defmessage have basically the same interface as defgeneric/defmessage.

* Buzzwords are automatically generated by defmessage, although it's *strongly* encouraged that they
  be explicitly defined, as a matter of style (buzzwords clobber defuns and defgenerics, and
  vice-versa).

* Dynamic removal of messages, as well as entire buzzwords with undefmessage/undefbuzzword.

* CLOS backend allows effortless plug-in to many Lisp libraries that make use of the MOP (such as
  Elephant, for almost free object persistence).

* Auto-generated readers/writers, with :accessor, :reader, and :writer slot options.

* Runs on plain CL -- no libraries necessary.

* Portable across implementations -- no MOP or fancy implementation-specific features required.

* Nickname slot for sheep metaobject, so helpful information can be printed by print-object.


Planned features that have not yet been implemented include:

* Various convenience tools for inspection

* Documentation string parsing for messages

* Read-only sheeple/individual properties

* CLOS integration, including autoboxing of entire class hierarchies.

* :before and :after messages (no :around for now)

* A basic MOP. Some of it is already written. Although at least one version of Sheeple will run on
  top of CLOS to maintain compatibility with some useful tools written for the MOP. A native MOP
  might get written at some point.


Usage manual
============

Vocabulary
----------

* Sheep - singular used to refer to a single Sheeple object.

* Sheeple - plural used to refer to more than one sheep. Also used to refer to the project.

* =Dolly= - Ancestor of all sheep.

* Hierarchy List - An acyclic graph generated by COMPUTE-SHEEP-HIERARCHY-LIST that contains the
calculated ancestors of a particular sheep, sorted breadth-first left-right. Note that hierarchy
list is an ordered set.

* Ancestor - Any sheep that appears in the list generated by COMPUTE-SHEEP-HIERARCHY-LIST for any
given sheep, with sheep removed. This list only includes direct ancestors, not objects that could be
considered 'cousins'.

* Descendant - For a sheep X, any sheep Y whose hierarchy list will contain X, except Y itself.

* Parent - A direct parent of a sheep, e.g. a sheep object present directly in a sheep's
sheep-direct-parents list.

* Child - A direct child of a sheep.

* Sibling - Two sheeple that share the same hierarchy list are siblings

* Buzzword - A Generic function. Holds pointers to all existing messages (methods)

* Message - The message a particular buzzword gets across when given a set of arguments. Messages
  are defines for a specific set of args, and can be specialized on particular sheeple. Built-in
  types are supported, with the naming scheme =type-name=.

* Wolf - A built-in lisp type.

* Fleece - A wrapper for wolves that allows Sheeple to treat them as any other sheep -- specializing
methods, cloning, etc.

* Fleeced wolf - A wolf wrapped in a fleece. e.g. an autoboxed built-in type. All wolves are
  automatically fleeced by relevant functions. 

* =white-fang= - All fleeced wolves are descendants of =white-fang=, which is a clone of =dolly=.

* Most lisp types have fleeces assigned to them, and they follow the =string= naming scheme.

(pseudo-)Specification:
-----------------------
### == Sheep Cloning ==

* Objects are prototypes. Objects are called sheep or sheeple. All sheep are children of =DOLLY=.

* Sheeple can have multiple direct parents (multiple inheritance)

* Ancestor ordering works the same way as it does with CLOS (first parent defined in CLONE has
  greater precedence than second.) Ancestors are ordered with a breadth-first left-to-right graph
  sorting algorithm.

* All objects have a numerical SID (Sheep ID)

* The list of direct parents is dynamic. Parents can be added or removed at run time.

* Sheeple does not have a universal addressing mechanism like functions and classes do. Instead,
there are a number of built-in sheeple, including =DOLLY=, which can be addressed by symbol where
useful, such as when setting one of them as a parent, or defining a talent. For ease of
identification while working at the REPL, there is a nickname slot in the metaobject, which can be
accessed with SHEEP-NICKNAME.

* Built-in sheeple (known as fleeced wolves, or just wolves) correspond to all built-in Lisp types,
  as well as any new types defined by DEFTYPE, but not to CLOS-defined classes.

* New sheeple are created by using the CLONE macro. CLONE works similar to DEFCLASS:

         (clone (parent1 parent2)
           ((property1 value1)
            (property2 value2 :property-option value))
	   (:clone-option value)
	   (:another-option value))

         (clone () ()) ;; also valid. Options are optional!

         (clone () ((foo 10)))

         (defvar *sample-sheep* (clone () ((my-property "Wheee" :accessor get-my-property))))

* An empty parent list when using CLONE will automatically clone =DOLLY=

#### Clone Options

* The :copy-all-values CLONE option copies over all values available to the new sheep into the sheep
  itself. This is useful for ensuring that other objects do not change an available property value.

* :copy-direct-values works like :copy-all-values, except it only copies the new sheep's parents'
  direct-values locally, still relying on the hierarchy-list for other properties.

* The :nickname CLONE option sets a nickname for the sheep metaobject, which is used when printing
  the object at the REPL:

         SHEEPLE> (clone () () (:nickname "Johnny Bravo"))
         #<Standard Sheep SID: 22 AKA: Johnny Bravo {B777401}>

* Another option, although highly experimental, is :mitosis. This option is not for the faint of
  heart. :mitosis basically turns CLONE into a macro that accepts only one item in the parent list.
  All direct properties, roles, and direct parents are then copied into the new object, without
  making the object it clones a parent of the new object.

#### Property Options

* :reader - creates a non-setfable reader message for this property. Trying to SETF signals a
            NO-MOST-SPECIFIC-MESSAGE error.

        (defparameter *sample-sheep* (clone () ((prop "value" :reader read-prop))))
	(read-prop *sample-sheep*) => "value"
	(setf (read-prop *sample-sheep*) "new-value" => NO-MOST-SPECIFIC-MESSAGE for (SETF READ-PROP)

* :writer - creates a writer message, without creating a matching reader. The lambda-list for this
            message is: (new-value sheep-object).

        (defparameter *sample-sheep* (clone () ((prop "value" :reader read-prop :writer set-prop-to))))
        (set-me-to "new-value" *sample-sheep*) => "new-value"
        (read-prop *sample-sheep*) => "new-value"

* :accessor - Creates an accessor, which is a reader that you can use SETF on.

        (defparameter *sample-sheep* (clone () ((prop "value" :accessor prop))))
        (prop *sample-sheep*) => "value"
        (setf (prop *sample-sheep*) "new-value" => "new-value"


#### Sheep Inspection

* The functions DIRECT-PARENT-P, ANCESTOR-P, DIRECT-CHILD-P, and DESCENDANT-P return T for their
corresponding checks.

#### Sheep Manipulation

* The function ADD-PARENT receives a NEW-PARENT sheep, and a CHILD sheep. It pushes NEW-PARENT into
CHILD's direct-parents if NEW-PARENT is not already there. If using ADD-PARENT would result in a
cyclic hierarchy list, a SHEEP-HIERARCHY-ERROR condition is signaled, and the CHILD is
unaffected. The new-parent is added to the front of the direct-parents list, like a stack
push. Returns the CHILD object.

        (add-parent *mommy* *kiddo*) => <SHEEP SID: 2> (*kiddo*)
        (add-parent *kiddo's-descendant* *kiddo*) => ERROR: SHEEP-HIERARHY-ERROR


* The function REMOVE-PARENT receives a PARENT sheep and a CHILD sheep. It also takes an optional
:keep-properties value that can be T or NIL. If T, it will copy all of PARENT's direct-properties
into CHILD before removing the parent from the child's direct-parents. If NIL, the parent's
direct-properties will no longer apply to child. Returns the CHILD object.
        
        (remove-parent *daddy* *kiddo*) 
        => KIDDO object, without *daddy*'s direct-slot values.
       
        (remove-parent *daddy* *kiddo* :keep-properties t) 
        => KIDDO object, with a copy of *daddy*'s direct-slots.


### == Properties ==

* Properties are key-value pairs, where key is a symbol.

* One property may only have one value, although that value can be a collection of some sort.

* Sheeple have direct properties and indirect properties

* Direct properties are set directly in a specific sheep object.

* Indirect properties are accessed by searching for direct properties that have been set along the
sheep's inheritance chain. The value of that ancestor's property is used instead.

* Changing the value in the parent thus changes the value in the child.

* A child may override the value set by one of its parents at any time by setting a direct property.

* If an ancestor already sets a property, a descendant may not remove that property from itself,
  unless it removes that property from the ancestor.

* When accessing indirect properties, the hierarchy list ordering is obeyed.

* The function GET-PROPERTY receives two arguments: a sheep object and a property-name. It returns
  the value of that property, and searches indirect properties. There is no user-level function for
  only getting the direct property value of a sheep. Signals a condition of type UNBOUND-PROPERTY if
  there is no binding, direct or indirect, for that property-name.

        (get-property *sample-sheep* 'foo)


* The function (SETF GET-PROPERTY) sets a direct property on a sheep. If the property did not exist,
  it adds it, and it changes it if it did. Returns the new value.

        (setf (get-property *sample-sheep* 'foo) 'bar)


* The function HAS-DIRECT-PROPERTY-P returns T if a direct property was set on sheep, and NIL
  otherwise.

        (has-direct-property-p *sample-sheep* 'foo) => T


* The function HAS-PROPERTY-P returns T if the property is available to sheep, whether it's direct
  or indirect.

        (has-property-p *sample-sheep* 'foo) => T


* The function REMOVE-PROPERTY receives a sheep and a property-name, and removes a direct property
  from sheep. Returns NIL if there was no direct property with that property-name set, and T if it
  removed an existing property.

        (remove-property *sample-sheep* 'foo) => T


* The function WHO-SETS receives a SHEEP and a PROPERTY-NAME, and returns the sheep that sets a
  particular property visible to SHEEP, whether it be a direct-property or an indirect-property.
  If the property is unbound, it simply returns NIL.

        (who-sets *sample-sheep* 'foo) => NIL


* The function AVAILABLE-PROPERTIES receives a SHEEP, and returns a list of available bound
  property keys for SHEEP. An empty list is returned if SHEEP has no available bound properties.

        (setf (get-property *sample-sheep* 'baz) 'quux)
        (available-properties *sample-sheep*) ==> (BAZ)


### == Buzzwords/Messages ==

Buzzwords and Messages are very similar to CLOS' generic functions/methods. Anyone familiar with
CLOS programming should have a fairly easy time wrapping their head around Sheeple's system.

#### Main interface

* The DEFBUZZWORD macro is used to define a buzzword that will hold different messages. It accepts
  an optional documentation value. Buzzwords are automatically defined by defmessage, but the
  preferred and recommended style is to define buzzwords first. Not doing so signals STYLE-WARNING.

        (defbuzzword synergize "Synergizes its arguments, preparing them for the Next Generation")

* The DEFMESSAGE macro defines a message based on its arguments. Sheeple messages are left-weighted
  multimessages which can dispatch on multiple different arguments. The syntax follows closely with
  defmethod's specialized lambda-list syntax, except the specializers are actual objects instead of
  class names. An unspecialized item in the lambda list will default to dispatching on =dolly= for
  that lambda-list slot.
  Also unlike defmethod, the lambda-lists for messages can be of variable length, while still
  dispatching on all arguments.
  The format is: (defmessage message-name (plain-variable (specialized-variable object)) @body)
  A Massive example:

        (defparameter sheep1 (clone () ()))
	(defparameter sheep2 (clone () ()))

        (defmessage synergize (foo) 
           (print foo)) ;defaults to =dolly=
        (synergize "hey!") => 5 ;the message facility autoboxes regular lisp objects

        (defmessage synergize ((something sheep1)) 
           (format t "~a is the first sheep. FYI"))
        ;; lambda-list variables do not have to be the same across messages, 
        ;; I only do it here for convenience.
        (synergize sheep1) => #<SHEEP SID:3> is the first sheep. FYI

	(defmessage synergize ((foo =number=)) 
           (* 2 foo)) ;this works inside closures, by the way
        (synergize 5) => 10

	(defmessage synergize ((foo 5)) ;any object can be dispatched on. Non-sheep are autoboxed.
           (print "FIVE!! THIS IS VERY EXCITING!!1"))
        (synergize 5) => "FIVE!! THIS IS VERY EXCITING!!1"
	
        (defmessage synergize ((foo =float=)) (floatp float)) 
	(synergize 5.0) => T                                ; Sheeple has a CLOS-like hierarchy for
	(synergize 5) => "FIVE!! THIS IS VERY EXCITING!!1"  ; fleeced wolves.

        (defmessage synergize ((foo sheep1) (bar sheep2)) 
           (print "I got sheep1 first, then sheep2"))
        (defmessage synergize ((foo sheep2) (bar sheep1)) 
           (print "I got sheep2 first, then the first sheep."))

        (defmessage synergize ((foo =number=) (bar =number=)) 
           (+ foo bar))
	(synergize 3 5) => 8
        (synergize 4 "hey hey hey!") => ERROR: NO-MOST-SPECIFIC-MESSAGE
        
        (defmessage synergize ((foo =string=) (bar =string=))
           (concatenate 'string foo bar))
        (synergize "Hey " "Jude") => "Hey Jude"

* undefbuzzword completely undefines a buzzword, removing all messages and making the function
  unbound.

* undefmessage accepts the same kind of lambda-list that defmessage does, but undefines whatever
  message fits that lambda-list.
