* TODO 1.1+
** TODO Implement :message option for defbuzzword (like CLOS' :method option)
   I don't care about this feature all that much, so I might just keep bumping it until someone
   who -does- care asks for it.
** TODO Allow individual message :documentation
* TODO 1.0
** TODO Thoroughly test sheeple, make sure everything's stable
** TODO Write a small sample application (maybe convert yashmup?)
* TODO 0.95
  the "I should have done all that shit in the first place" release
** TODO Complete documentation with tutorial and user's guide
* TODO 0.9
** TODO Write plenty more unit tests.
*** TODO Write unit tests for defsheep 
*** TODO Write unit tests for new LL stuff
*** TODO Write more thorough tests to make sure caching schemes aren't broken
** TODO More optimization
   The goal here is to have manipulator dispatch be at a maximum 2x slower than property-value. If I
   can get it as fast as direct property-access, even better, but this shit can go so much faster
   without too much magic.
* DONE 0.8
** DONE Optimize the shit out of message dispatch
   It's pretty fast right now, but nothing compared to PCL.
   I should read through the Slate paper again and see if I can implement any of their
   suggested optimizations.
   Additionally, I found a paper that talks about how PCL's caching works. I think I can
   implement something similar in sheeple, which would then make message dispatch absurdly fast.
   One word: MEMOIZATION. Do it.
   Memoization done, but profiling shows that there's other stuff in the way (such as the
   numerous calls to remove-if-not -during- dispatch time. Shit.
   As far as this remove-if-not, etc stuff goes -- I think I can figure out some fancy
   message-list caching system. The problem is that make-message-lambda might get confused, and
   I want to avoid changing stuff outside of message-dispatch.lisp as much as possible.
   There will be a time in the future when heavy-optimization and code-uglying will be appropriate.
   But for now, while the system is still being designed, it's best to keep things clean and
   flexible (and slow...).
   UPDATE: New caching system has made shit run hella-fast. According to sb-sprof, the next step
   would be to have a nicer hashing scheme, since using a list and using equal to fetch stuff from
   a hash table isn't really very speedy. For now, though, this will do! :) (haven't really tested
   this too much, though. Hm.)
** DONE Fix lambda-list keyword things
* DONE 0.7
** DONE Make initialize-instance a buzzword so :after messages can be defined
   both initialize-instance and reinitialize-instance are regular buzzwords now.
** DONE Have buzzwords accept &keywords in lambda lists, and maintain congruence as per CLOS
   This seemed to be working, but I have to put &allow-other-keys in all methods in order for it
   to work, which is sub-optimal. This can be fixed, and I should do it by 0.8
   UPDATE: Fix'd in make-message-lambda :)
* DONE 0.6
** DONE Write a replace-sheep function
  it should swap a sheep's properties/contents with a new 'definition',
  while maintaining identity.
** DONE Wrap replace-sheep with a DEFSHEEP macro.
** DONE Optimize the shit out of property-access
  Done for now -- it's only slightly slower than PCL right now
** DONE Work out the whole conditions thing, and what they print out. 
   Put them all in conditions.lisp?
* DONE 0.5
** DONE Get all pre-0.6 done by 0.5
