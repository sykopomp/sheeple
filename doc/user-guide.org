* Vocabulary
** Sheep
   singular used to refer to a single Sheeple object.
   
** Sheeple
   plural used to refer to more than one sheep. Also used to refer to the project.

** Property
   In a sheep, a property is a key/value pair, with a symbol as a key. Data is stored in properties.

** Direct Property
   A property that is present directly in a particular sheep

** Indirect Property
   A property that a sheep has access to that is stored elsewhere in the hierarchy-list

** #@
   This reader macro expands to (find-proto <name>). In this guide,
   we refer to objects that have been defined as prototypes with the #@ convention.
** #@T
   the root object, ancestor of all sheep objects.

** #@Dolly
   Ancestor of all actual sheep (the ones that aren't built-ins).

** Hierarchy List
   An ordered set containing the order of delegation for a particular sheep. The set
   is fetched using SHEEP-HIERARCHY-LIST

** Ancestor
   Any sheep that appears in the SHEEP-HIERARCHY-LIST for any given sheep, with sheep removed. This
   list only includes direct ancestors, not objects that could be considered 'cousins'.

** Descendant
   For a sheep X, any sheep Y whose hierarchy list will contain X, except Y itself.

** Parent
   A direct parent of a sheep, e.g. a sheep object present directly in a sheep's
   sheep-parents list.

** Child
   An object that directly clones another sheep.

** Sibling
   Two sheeple that share the same hierarchy list are siblings

** Message
   A Generic function. Holds pointers to all existing replies (methods).
   
** Reply
   A message defines the prototype for how it is supposed to look, a reply defines the actual
   code to run, and when to run it.

** Built-in
   A built-in lisp type.
   Most lisp types have boxed-object prototypes assigned to them, so they can
   be fetched using e.g. #@string.
   These prototypes can have replies defined on them.
** Boxed object
   An object (probably) autoboxed by Sheeple when appropriate (cloning and reply definition).
   These objects wrap any non-sheep Lisp object and allows definition of replies, addition of
   properties, etc (they're just sheeple).

** #@boxed-object
   All boxed objects are descendants of #@boxed-object, which is a 
   clone of #@T (this is important -- messages defined on #@dolly won't 
   affect built-ins!!)

* API Documentation
** Sheep cloning
   Sheeple does not have a concept of "classes". Instead, new objects are simply based on other
   objects. For the purposes of maintaining what would usually be a class hierarchy, one can treat
   sheeple as "prototypes" for other sheeple -- it's common to simply define an object for the sole
   purpose of cloning it.  Sheeple can clone multiple objects at the same time, and the rules for
   dividing up behavior are the same CLOS uses (you can read the rules here:
   http://www.lispworks.com/documentation/HyperSpec/Body/04_ce.htm).  The list of parents/delegates
   is dynamic. Parents can be added or removed at run time.  New sheeple are created by using the
   the CLONE function, and the DEFCLONE and DEFPROTO macros.

*** CLONE function
    Syntax:
    clone &rest sheeple => new-sheep

    Args and values:
    sheeple -- a list of lisp objects

    Description:
    CLONE creates a new STANDARD-SHEEP instance with SHEEPLE as its parents.
    Any non-sheep objects in SHEEPLE will be autoboxed and -those- objects will be added
    as parents.
    The new sheep's parents list will be ordered the same as they are given.
    An empty parent list when using CLONE will automatically clone #@DOLLY

    Examples:

      (clone) => #<Sheep #x15007E06>
      (sheep-parents *) => (#<Sheep AKA: DOLLY #x14C8947E>)
      (clone (clone) (clone) (clone)) => #<Sheep #x15007E06>

    Side effects: Parents are added using ADD-PARENT, which may have side-effects.
    
*** DEFCLONE macro
    Syntax:

*** DEFSHEEP macro
    This macro is essentially a wrapper around CLONE* that handles redefinition of a sheep. The
    variable bound by defsheep is a regular special variable (it uses DEFVAR in its expansion).

         (defsheep =sample-sheep= ()
           ((my-property "wheeee")))

    The symbol provided to DEFSHEEP as a sheep name is also used as that sheep's :nickname.

*** Clone Options
    There are several available options for the CLONE(*) and DEFSHEEP macros that can affect the
    effects of cloning.

**** :DEEP-COPY
     The :deep-copy CLONE option copies over all values available to the new sheep into the sheep
     itself. This is useful for ensuring that other objects do not change an available property
     value. Using the :deep-copy option yields identical results.
**** :SHALLOW-COPY
     :shallow-copy works like :deep-copy, except it only copies the new sheep's parents'
     direct-values locally, still relying on the hierarchy-list for other properties.
**** :NICKNAME
     The :nickname CLONE option sets a nickname for the sheep metaobject, which is used when
     printing the object at the REPL. The nickname can be retrieved and changed at any time with
     the sheep-nickname manipulator function.

         SHEEPLE> (clone () () (:nickname "Johnny Bravo"))
         #<Standard Sheep AKA: Johnny Bravo {B777401}>

*** Property Options
    These options affect the definition of properties in the CLONE and DEFSHEEP macros.

**** :READER
      Creates a specialized, non-setfable reader message for this property. Trying to SETF signals a
      NO-MOST-SPECIFIC-MESSAGE error.  
      Setting this option to NIL prevents CLONE* from auto-generating a reader. It will signal an
      error if both NIL and a symbol are passed to two :reader options in the same property
      definition. 

        (defparameter *sample-sheep* (clone () ((prop "value" :reader read-prop))))
	(read-prop *sample-sheep*) => "value"
	(setf (read-prop *sample-sheep*) "new-value" => NO-MOST-SPECIFIC-MESSAGE for (SETF READ-PROP)

**** :WRITER
      Creates a specialized writer message, without creating a matching reader. The lambda-list for
      this message is: (new-value sheep-object).
      Setting this option to NIL prevents CLONE* from auto-generating a writer. It will signal an
      error if both NIL and a symbol are passed to two :writerr options in the same property
      definition. 


        (defparameter *sample-sheep* (clone () ((prop "value" :reader read-prop :writer set-prop-to))))
        (set-me-to "new-value" *sample-sheep*) => "new-value"
        (read-prop *sample-sheep*) => "new-value"

**** :ACCESSOR
      Generater both a reader and a writer. CLONE* automatically defines a reader/writer pair unless
      this option is passed to it, in which case it uses that specific accessor name.  The same
      rules apply as :reader/:writer when it comes to setting this as NIL.
      
        (defparameter *sample-sheep* (clone () ((prop "value" :accessor get-prop))))
        (get-prop *sample-sheep*) => "value"
        (setf (get-prop *sample-sheep*) "new-value") => "new-value"
	
** Sheep manipulation
*** Sheep Inspection
    The functions DIRECT-PARENT-P, ANCESTOR-P, DIRECT-CHILD-P, and DESCENDANT-P return T for their
    corresponding checks. (refer to VOCABULARY for the definition of the predicates' namesakes.)

*** ADD-PARENT
    The function ADD-PARENT receives a NEW-PARENT sheep, and a CHILD sheep. It pushes NEW-PARENT
    into CHILD's direct-parents if NEW-PARENT is not already there. If using ADD-PARENT would result
    in a cyclic hierarchy list, a SHEEP-HIERARCHY-ERROR condition is signaled, and the CHILD is
    unaffected. The new-parent is added to the front of the direct-parents list, like a stack
    push. Returns the CHILD object.

        (add-parent *mommy* *kiddo*) => <SHEEP {numbers}> (*kiddo*)
        (add-parent *kiddo's-descendant* *kiddo*) => ERROR: SHEEP-HIERARHY-ERROR

*** REMOVE-PARENT
    The function REMOVE-PARENT receives a PARENT sheep and a CHILD sheep.
        
        (remove-parent *daddy* *kiddo*) 
        => KIDDO object, without *daddy*'s direct-property values.
       
** Properties
   The most important part about properties in Sheeple is that a sheep delegates not just the
   existence of a property, but the current value as well.
   Sheeple decides which property value to use by following a sheep's hierarchy list for the nearest
   available value. Thus, setting a property directly always overrides any delegation.
*** WITH-PROPERTIES/WITH-ACCESSORS
    The WITH-PROPERTIES macro is identical in function to the with-slots macro that CLOS uses. Also,
    the default CLOS WITH-ACCESSORS can be used normally with sheeple. Another macro called
    WITH-MANIPULATORS, identical to WITH-ACCESSORS is available, but it is deprecated.
*** PROPERTY-VALUE
    The function PROPERTY-VALUE receives two arguments: a sheep object and a property-name. It
    returns the value of that property, and searches indirect properties. There is no user-level
    function for only getting the direct property value of a sheep. Signals a condition of type
    UNBOUND-PROPERTY if there is no binding, direct or indirect, for that property-name.

        (property-value *sample-sheep* 'foo) => /property value/

*** DIRECT-PROPERTY-VALUE
    This function works like PROPERTY-VALUE, but signals an UNBOUND-PROPERTY error if the sheep
    object does not hold the value locally.

        (direct-property-value *sample-sheep* 'foo) => /direct value or ERROR/

*** (SETF PROPERTY-VALUE)
    The function (SETF PROPERTY-VALUE) sets a direct property on a sheep. If the property did not
    exist, it adds it, and it changes it if it did. Returns the new value.

        (setf (property-value *sample-sheep* 'foo) 'bar)

*** HAS-DIRECT-PROPERTY-P
    The function HAS-DIRECT-PROPERTY-P returns T if a direct property was set on sheep, and NIL
    otherwise.

        (has-direct-property-p *sample-sheep* 'foo) => T

*** HAS-PROPERTY-P
    The function HAS-PROPERTY-P returns T if the property is available to sheep, whether it's direct
    or indirect.

        (has-property-p *sample-sheep* 'foo) => T

*** REMOVE-PROPERTY
    The function REMOVE-PROPERTY receives a sheep and a property-name, and removes a *direct*
    property from SHEEP. It returns NIL if there was no direct property with that property-name set,
    and T if it removed an existing property.

        (remove-property *sample-sheep* 'foo) => T

*** WHO-SETS
    The function WHO-SETS receives a SHEEP and a PROPERTY-NAME, and returns the sheep that sets a
    particular property visible to SHEEP, whether it be a direct-property or an indirect-property.
    If the property is unbound, it simply returns NIL.

        (who-sets *sample-sheep* 'foo) => NIL

*** AVAILABLE-PROPERTIES
    The function AVAILABLE-PROPERTIES receives a SHEEP, and returns a list of available bound
    property keys (symbols) for SHEEP. An empty list is returned if SHEEP has no available bound
    properties.

        (setf (property-value *sample-sheep* 'baz) 'quux)
        (available-properties *sample-sheep*) ==> (BAZ)

** Buzzwords/Messages
   Buzzwords and Messages are very similar to CLOS' generic functions/methods. Anyone familiar with
   CLOS programming should have a fairly easy time wrapping their head around Sheeple's system.
*** DEFBUZZWORD
    The DEFBUZZWORD macro is used to define a buzzword that will hold different messages. It accepts
    an optional documentation option. Buzzwords are automatically defined by defmessage, but the
    preferred and recommended style is to define buzzwords first. Not doing so signals
    STYLE-WARNING.  Note: buzzword and message lambda-lists follow the rules described in
    http://www.lispworks.com/documentation/HyperSpec/Body/07_fd.htm

        (defbuzzword synergize (foo bar)
          (:documentation "Synergizes FOO and BAR, preparing them for the Next Generation"))

*** DEFMESSAGE
    The DEFMESSAGE macro defines a message based on its arguments. Sheeple messages are
    left-weighted multimessages (by default) which can dispatch on multiple different arguments. The
    syntax follows closely with defmethod's specialized lambda-list syntax, except the specializers
    are actual objects instead of class names. An unspecialized item in the lambda list will default
    to dispatching on =dolly= for that lambda-list property. The basic format is:

        (defmessage message-name (plain-variable* (specialized-variable object)*) @body)

**** Specialized messages
     Messages are specialized by replacing the variable with (specialized-variable object).

        (defmessage message-name (foo (bar =my-sheep=))
          (print "This is a specialized message"))

     Messages with unspecialized lambda lists are considered unspecialized, since they dispatch on
     the built-in sheep =T=, which is at the top of the hierarchy list for all sheep and wolves.

**** Message combination
     Message definitions can also accept qualifiers. The standard message combination supports three
     qualifiers: :before, :after, and :around.

        (defmessage message-name :qualifier (...) body)

***** Primary messages
      Messages without qualifiers are considered "primary" messages. It is required that a primary
      message be available for any message combination to happen.
***** CALL-NEXT-MESSAGE
      This function can be called within the body of any message. It will execute the next available
      applicable message for the current call. You may pass new arguments to C-N-M, but it will not
      change the dispatch of the message. (the next message will be executed as if it had dispatched
      on the original arguments).
***** NEXT-MESSAGE-P
      Within the body of a message, you may use NEXT-MESSAGE-P to check for the presence of a next
      message. 
***** :BEFORE
      Any available :before messages are executed before the execution of the primary message(s).
      When used inside the body of a :before message, CALL-NEXT-MESSAGE calls the next
      applicable :before message, not the next primary one.
***** :AFTER
      Any available :after messages are executed after the execution of the primary message(s).
      When used inside the body of an :after message, CALL-NEXT-MESSAGE calls the next most
      specific :after message, not the next primary message.
***** :AROUND
      :around messages "wrap" around the current primary message. CALL-NEXT-MESSAGE *must* be called
      in the body of an :around message. C-N-M calls the most applicable primary message, not the
      next most specific :around message.

**** Huge example
     This example illustrates usage of sheeple and messages:

        (defsheep =sheep1= (clone () ())) ;note: the =foo= are purely stylistic, but recommended.
        (defsheep =sheep2= (clone () ()))

        (defmessage do-it (foo)
          (print foo)) ;defaults to =dolly=
        (do-it "hey!") => hey! ;the message facility autoboxes regular lisp objects

        (defmessage do-it ((something =sheep1=)) 
          (format t "~a is =sheep1=. FYI" something))
        ;; lambda-list variables do not have to be the same across messages, 
        ;; I only do it here for convenience.
        (do-it =sheep1=) => #<Standard Sheep {BA28B89}> is the first sheep. FYI

        (let ((x 5))
	   (defmessage do-it ((foo =number=)) 
	     (* x foo))) ;It captures the lexical environment, too.
        (do-it 5) => 10

        (defmessage do-it ((foo 5)) ;any object can be dispatched on. Non-sheep are autoboxed.
	  (declare (ignore foo)) ;declarations work
	  (print "FIVE!! THIS IS VERY EXCITING!!1"))
        (do-it 5) => "FIVE!! THIS IS VERY EXCITING!!1"

        (defmessage do-it ((foo =float=))
          (floatp float))

        (do-it 5.0) => T                                ; Sheeple has a CLOS-like hierarchy for
        (do-it 5) => "FIVE!! THIS IS VERY EXCITING!!1"  ; fleeced wolves.
        (do-it 6) => 12
	
        (defmessage synergize ((foo =sheep1=) (bar =sheep2=))
          (print "I got =sheep1= first, then =sheep2="))

        (defmessage synergize ((foo =sheep2=) (bar =sheep1=)) 
          (declare (ignore foo bar))
          (print "I got =sheep2= first, then the first sheep."))

        (defmessage synergize ((foo =number=) (bar =number=)) 
          (+ foo bar))
        (synergize 3 5) => 8
        (synergize 4 "hey hey hey!") => ERROR: NO-MOST-SPECIFIC-MESSAGE
        
        (defmessage synergize ((foo =string=) (bar =string=))
          (concatenate 'string foo bar))
        (synergize "Hey " "Jude") => "Hey Jude"

        ;; :before and :after
        (defparameter =test-sheep= (clone () ((var "value" :accessor var))))
        (var =test-sheep=) => "value"
         
        (defmessage var :before ((sheep =test-sheep=))
          (setf (property-value sheep 'var) "new-value"))
        (var =test-sheep=) => "new-value"
        (setf (var =test-sheep=) "old-value")
        (property-value =test-sheep= 'var) => "old-value"
        (var =test-sheep=) => "new-value"

        (defmessage var :after ((sheep =test-sheep=))
          (setf (property-value sheep 'var) "after-value"))
        (var =test-sheep=) => "new-value"
        (property-value =test-sheep= 'var) => "after-value"

** Potential gotchas:
*** CLOS (semi-)compatibility
    For the time being, CLOS objects and CLOS-defined types are boxed as =white-fang=, not as
    fleeced versions of the classes/objects.
*** Buzzword definition
    If you define a buzzword, then clobber that buzzword with a defun or defgeneric, and redefine
    the buzzword using the same name, the warning about clobbering a regular function is not
    signaled.

*** Threads
    ...are completely untested. I have no idea what kind of behavior could crop up when using
    threads, and I recommend you don't try until I've bothered to do something about it.
* Performance notes
** Property access
   As of version 1.0, property access is O(n), where n is the number of sheep that must be traversed
   in order to find a property value. Worst case happens when the property is completely unbound for
   a given sheep hierarchy. No caching is done right now, as possible caching schemes that are both
   fast at reading, and fast at writing are being evaluated.
   Realistically, sheep hierarchies are rarely very deep, so this should not become an issue for
   most cases. Once caching is implemented, this will become O(1).
** Message dispatch
   Message dispatches are cached on first execution and changed when appropriate. This makes
   dispatch essentially O(1), even for multimessages. Even though multimessage dispatch is very
   fast, singly-dispatched accessors have not been optimized enough. Thus, for any purposes that
   require optimal read-access, directly accessing the properties with PROPERTY-VALUE is
   recommended. Optimization of accessors is planned.
** Comparison to CLOS performance
   Sheeple is still very young. Thus, it's no surprise that a good implementation of CLOS will
   outperform it when used on the same hardware, with the same CL implementation. Nevertheless,
   tests run on SBCL and Clozure CL show that the performance difference is on the order of 5-10x for
   property access, and about 10-15x for message vs method dispatch (although sheeple sometimes
   performs even slower). Hopefully, as sheeple matures, it will become as fast as an implementation
   like PCL. Fortunately, because of the similarities of the APIs, many of PCL's optimizations can
   be translated to Sheeple itself.
   
* MOP Documentation
  Sheeple exposes a (currently) small metaobject protocol for inspecting and changing behavior of
  sheep objects. The protocol uses CLOS as a backend, so users may extend Sheeple behavior as
  desired using an API familiar to those who have used the CLOS MOP before.

** Metaobject classes

*** STANDARD-SHEEP
    This class defines default behavior for all SHEEP objects. Certain CLOS methods can be
    specialized on it in order to change behavior, and certain methods can be defined to get access
    to meta-information about the sheep object.

** Metaobject generic functions
   Sheeple exposes the following generic functions for various purposes.

*** Inspection
    These functions can be used to get information about the sheep object. While the information
    they provide can be used to rebuild new sheeple objects, the effects of trying to alter them
    directly or indirectly are undefined unless otherwise stated. (don't do it)

**** SHEEP-NICKNAME
     This function returns the nickname assigned to this sheep object. This place can be SETFd in
     order to change the sheep's nickname.
     
           (sheep-nickname sheep) => string-nickname
           (setf (sheep-nickname sheep) new-nickname) => new-nickname
           (sheep-nickname sheep) => new-nickname

**** SHEEP-DOCUMENTATION
     Like SHEEP-NICKNAME, but returns the documentation string for the sheep object. This value can
     be SETFd to alter the sheep's documentation string.

           (sheep-documentation sheep) => "This sheep is documented! I write good code!"
     
**** SHEEP-HIERARCHY-LIST
     Returns an ordered list representing the precedence order used by Sheeple when either a
     method is called, or a property-value is requested.

           (sheep-hierarchy-list sheep) => (SHEEP's hierarchy list)

**** SHEEP-PARENTS
     Returns an ordered list of SHEEP's direct parent objects, in the order they were provided to
     CLONE/CLONE*/DEFSHEEP.

           (sheep-parents sheep) => (sheep's-parents-list)

**** SHEEP-DIRECT-ROLES
     Returns an unordered set of ROLE metaobjects that represent what messages SHEEP is a
     participant in.

           (sheep-direct-roles sheep) => (sheep's direct roles list)

**** SHEEP-DIRECT-PROPERTIES
     Returns an unordered set of PROPERTY-SPEC metaobjects that represent property definitions as
     provided to (or built by) CLONE/CLONE*/DEFSHEEP

           (sheep-direct-properties sheep) => (list of property-spec objects)

**** PROPERTY-SPEC-NAME
     Called on a PROPERTY-SPEC metaobject, this returns the symbol name for this property.

           (property-spec-name sheep-property-spec-object) => SYMBOL

**** PROPERTY-SPEC-VALUE
     Called on a PROPERTY-SPEC metaobject, this returns this property's current direct value.

           (property-spec-value sheep-property-spec-object) => VALUE

**** PROPERTY-SPEC-READERS
     Called on a PROPERTY-SPEC metaobject, this returns a list of names used to define reader
     messages that read this property's value, specialized on the sheep object.

           (property-spec-readers sheep-property-spec-object) => (list-of-message-names)

**** PROPERTY-SPEC-WRITERS
     Called on a PROPERTY-SPEC metaobject, this returns a list of names used to define writer
     messages that write this property's value, specialized on the sheep object.

           (property-spec-writers sheep-property-spec-object) => (list-of-message-names)

** Special buzzwords
   Additionally, some buzzword (not generic functions) can be specialized on sheep objects to alter behavior of
   sheep in various situations..

*** PRINT-SHEEP
     You can define messages on PRINT-SHEEP in order to change a particular sheep's printout.

        (defmessage print-sheep ((sheep my-special-sheep) stream)
          (format stream "~a is the most specialest sheep ever!" sheep))

*** INITIALIZE-SHEEP
     You may define messages for the buzzword INITIALIZE-SHEEP. This message handles all set-up of
     sheeple after its direct-parents are added.  This is most useful for defining 'complex'
     constructors that need access to a sheep. These constructors usually take the form of :before,
     :after, or :around messages, since defining a primary message would override standard sheep 
     setup.

        (defmessage initialize-sheep ((sheep my-super-specialest-sheep!) &key)
          (setf (some-other-property sheep) "woooo"))

*** REINITIALIZE-SHEEP
     This is called whenever a DEFSHEEP form is evaluated for an existing sheep.



